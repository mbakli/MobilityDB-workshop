<?xml version="1.0" encoding="utf-8" ?>
<chapter id ="AIS_Dashboard">
  <title>Dashboard and Visualization of Ship Trajectories (AIS)</title>
  <para>
    This module builds on the Managing Ship Trajectories (AIS) module by
    creating a business intelligence dashboard to visualize and
    manipulate data. The module shows how to set up a Grafana dashboard
    with an existing database, create basic visualizations, set
    properties for different outputs, and use Variables to create
    dynamic visuals.
  </para>
  <section xml:id="contents">
    <title>Contents</title>
    <para>
      The module covers the following topics:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Setting up a Grafana dashboard and connecting to a database
        </para>
      </listitem>
      <listitem>
        <para>
          Visualize a statistic from simple aggregations
        </para>
      </listitem>
      <listitem>
        <para>
          Visualize spatial frequency with a heat-map (not aggregated)
        </para>
      </listitem>
      <listitem>
        <para>
          Visualize frequency in spatial extent with a heat-map
          (pre-aggregated)
        </para>
      </listitem>
      <listitem>
        <para>
          Visualize spatio-temporal proximate objects
        </para>
      </listitem>
      <listitem>
        <para>
          Create dynamic queries with variables
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="tools">
    <title>Tools</title>
    <para>
      The tools used in this module are as follows:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          MobilityDB, on top of PostgreSQL and PostGIS
        </para>
      </listitem>
      <listitem>
        <para>
          Grafana (version 9.0.7)
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="setting-up-the-data-source">
    <title>Setting up the Data Source</title>
    <para>
      Data for the workshop is loaded into a MobilityDB database hosted
      on Azure, with all login information provided in the [Sign-in and
      Connect to Data Source] section below.
    </para>
    <para>
      Alternatively, you can set up your own MobilityDB database as described in the previous module.
      The raw data in CSV format is also available on the
       <ulink url="https://github.com/MobilityDB/MobilityDB-workshop/blob/master/data/ais_data.zip">MobilityDB-workshop
      repository</ulink>.
    </para>
  </section>
  <section xml:id="setting-up-the-visualization-dashboard">
    <title>Setting up the Visualization Dashboard</title>
    <para>
      We can use  <ulink url="https://grafana.com/">Grafana</ulink>,
      an open-source technology, to create a business intelligence
      dashboard. This will allow different users to set up their own
      queries and visualizations, or easily slice through data in a
      visual way for non-technical users.
    </para>
    <para>
      Start by setting up Grafana on your system:
    </para>
    <orderedlist numeration="arabic">
      <listitem>
        <para>
           <ulink url="https://grafana.com/docs/grafana/latest/setup-grafana/installation/mac/">macOS</ulink>
        </para>
        <programlisting language="bash">
brew update
brew install grafana
brew services start grafana
</programlisting>
      </listitem>
      <listitem>
        <para>
           <ulink url="https://grafana.com/docs/grafana/latest/setup-grafana/installation/debian/">Debian
          or Ubuntu</ulink>
        </para>
        <programlisting language="bash">
# Note These are instructions for Grafana Enterprise Edition (via APT repository),
# which they recommend. It includes all the Open Source features and can also use
# Enterprise features if you have a License.

# Setup Grafana Keys
sudo apt-get install -y apt-transport-https
sudo apt-get install -y software-properties-common wget
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -

# Add repository for stable releases
echo &quot;deb https://packages.grafana.com/enterprise/deb stable main&quot; 
  | sudo tee -a /etc/apt/sources.list.d/grafana.list

# Install Grafana
sudo apt-get update
sudo apt-get install grafana-enterprise
</programlisting>
      </listitem>
      <listitem>
        <para>
           <ulink url="https://grafana.com/docs/grafana/latest/setup-grafana/installation/windows/">Windows</ulink>
        </para>
        <para>
          Use the Windows installer available at the Grafana website.
        </para>
      </listitem>
    </orderedlist>
  </section>
  <section xml:id="sign-in-and-connect-to-data-source">
    <title>Sign in and Connect to Data Source</title>
    <para>
      We can now sign in to Grafana by going to
       <ulink url="http://localhost:3000/">http://localhost:3000/</ulink>.
      Set up a new account if needed. Additional instructions to login
      can be found here following the
       <ulink url="https://grafana.com/docs/grafana/latest/getting-started/build-first-dashboard/">build
      your first dashboard instructions.</ulink>
    </para>
    <para>
      Next, we <emphasis role="strong">add a data source</emphasis> for
      Grafana to interact with. In this case, we can follow the
       <ulink url="https://grafana.com/docs/grafana/latest/datasources/add-a-data-source/">Grafana
      instructions for adding a data source</ulink> and search for
       <ulink url="https://grafana.com/docs/grafana/latest/datasources/postgres/">PostgreSQL</ulink>
      as the data source.
    </para>
    <para>
      The workshop is using the following settings to connect to the
      postgres server on Azure.
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Name: <emphasis>DanishAIS</emphasis>
        </para>
      </listitem>
      <listitem>
        <para>
          Host: <emphasis>20.79.254.53:5432</emphasis>
        </para>
      </listitem>
      <listitem>
        <para>
          Database: <emphasis>danishais</emphasis>
        </para>
      </listitem>
      <listitem>
        <para>
          User: <emphasis>mobilitydb-guest</emphasis>
        </para>
      </listitem>
      <listitem>
        <para>
          Password: <emphasis>mobilitydb@guest</emphasis>
        </para>
      </listitem>
      <listitem>
        <para>
          TLS/SSL Mode: <emphasis>disable</emphasis>
        </para>
      </listitem>
      <listitem>
        <para>
          Version: <emphasis>12+</emphasis>
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Then press save and test.
    </para>
    <figure>
      <title>Data Source settings</title>
      <mediaobject>
        <imageobject>
          <imagedata width='70%' fileref="images/DataSourceSettings.png" />
        </imageobject>
        <textobject><phrase>Data Source settings</phrase></textobject>
      </mediaobject>
    </figure>
  </section>
  <section xml:id="creating-a-dashboard">
    <title>Creating a Dashboard</title>
    <para>
      With the dashboard configured, and a datasource added, we can now
      build different panels to visualize data in intuitive ways.
    </para>
    <section xml:id="speed-of-individual-ships">
      <title>Speed of Individual Ships</title>
      <para>
        Let's visualize the speed of the ships using the previously
        built query. Here we will represent it as a statistic with a
        color gradient.
      </para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Add a new panel
          </para>
        </listitem>
        <listitem>
          <para>
            Select <emphasis>DanishAIS</emphasis> as the data source
          </para>
        </listitem>
        <listitem>
          <para>
            In Format as, change <quote>Time series</quote> to
            <quote>Table</quote> and choose <quote>Edit SQL</quote>
          </para>
        </listitem>
        <listitem>
          <para>
            Here you can add your SQL queries. Letâ€™s replace the existing
            query with the following SQL script:
          </para>
          <programlisting language="sql">
SELECT mmsi, ABS( twavg(SOG) * 1.852 - twavg( speed(Trip))* 3.6 ) AS SpeedDifference
FROM Ships
ORDER BY SpeedDifference DESC
LIMIT 5;
</programlisting>
        </listitem>
        <listitem>
          <para>
            We can also quickly do some datatype transformations to help
            Grafana correctly interpret the incoming data. Next to the
            Query button, select <quote>Transform</quote>, add
            <quote>Convert field type</quote> and choose
            <emphasis>mmsi</emphasis> as <emphasis>String.</emphasis>
          </para>
          <figure>
            <title>Datatype transformations in Grafana</title>
            <mediaobject>
              <imageobject>
                <imagedata width='60%' fileref="images/DatatypeTransformationsInGrafana.png" />
              </imageobject>
              <textobject><phrase>Datatype transformations in
              Grafana</phrase></textobject>
            </mediaobject>
          </figure>
        </listitem>
        <listitem>
          <para>
            We will modify some visualization options in the
            panel on the right.
          </para>
          <para>
            First, choose <emphasis>stat</emphasis> as the visualization
          </para>
          <figure>
            <title>Choosing visualization type</title>
            <mediaobject>
              <imageobject>
                <imagedata width='50%' fileref="images/ChoosingVisualizationType.png" />
              </imageobject>
              <textobject><phrase>Choosing visualization
              type</phrase></textobject>
            </mediaobject>
          </figure>
          <para>
            <emphasis role="strong">Panel Options:</emphasis> Give the
            panel the title <emphasis>Incorrect AIS Boat Speed
            Reporting</emphasis>
          </para>
          <para>
            <emphasis role="strong">Value Options:</emphasis>
          </para>
          <itemizedlist>
            <listitem>
              <para>
                Show: All values
              </para>
            </listitem>
            <listitem>
              <para>
                Fields: speeddifference
              </para>
              <figure>
                <title>Value options dialogue box</title>
                <mediaobject>
                  <imageobject>
                    <imagedata width='50%' fileref="images/ValueOptionsDialogueBox.png" />
                  </imageobject>
                  <textobject><phrase>Value options dialogue
                  box</phrase></textobject>
                </mediaobject>
              </figure>
            </listitem>
          </itemizedlist>
          <para>
            <emphasis>Note: we can include a limit here instead of in
            our SQL query as well.</emphasis>
          </para>
          <para>
            <emphasis role="strong">Stat Styles:</emphasis>
          </para>
          <itemizedlist>
            <listitem>
              <para>
                Orientation: Horizontal
              </para>
              <figure>
                <title>Stat styles dialogue box</title>
                <mediaobject>
                  <imageobject>
                    <imagedata width='50%' fileref="images/StatStylesDialogueBox.png" />
                  </imageobject>
                  <textobject><phrase>Stat styles dialogue
                  box</phrase></textobject>
                </mediaobject>
              </figure>
            </listitem>
          </itemizedlist>
          <para>
            <emphasis role="strong">Standard Options:</emphasis>
          </para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>
                Unit: Velocity â†’ meter/second (m/s). <emphasis>Note: you
                can scroll in the drop-down menu to see all
                options.</emphasis>
              </para>
            </listitem>
            <listitem>
              <para>
                Color scheme: Green-Yellow-Red (by value)
              </para>
            </listitem>
          </itemizedlist>
          <figure>
            <title>Standard options dialogue box</title>
            <mediaobject>
              <imageobject>
                <imagedata width='50%' fileref="images/StandardOptionsDialogueBox.png" />
              </imageobject>
              <textobject><phrase>Standard options dialogue
              box</phrase></textobject>
            </mediaobject>
          </figure>
          <para>
            <emphasis role="strong">Thresholds:</emphasis>
          </para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>
                remove the existing threshold by clicking the little
                trash can icon on the right. Adding a threshold will
                force the visualization to color the data a specific
                color if the threshold is met.
              </para>
            </listitem>
          </itemizedlist>
          <figure>
            <title>Thresholds dialogue box</title>
            <mediaobject>
              <imageobject>
                <imagedata width='50%' fileref="images/ThresholdsDialogueBox.png" />
              </imageobject>
              <textobject><phrase>Thresholds dialogue
              box</phrase></textobject>
            </mediaobject>
          </figure>
        </listitem>
      </orderedlist>
      <para>
        The final visualization will look like the screenshot below.
      </para>
      <figure>
        <title>Individual ship speed statistics visualization</title>
        <mediaobject>
          <imageobject>
            <imagedata width='50%' fileref="images/IndividualShipSpeedStatisticsVisualization.png" />
          </imageobject>
          <textobject><phrase>Individual ship speed statistics
          visualization</phrase></textobject>
        </mediaobject>
      </figure>
    </section>
    <section xml:id="routes-used-most-frequently-visualized-with-a-static-heat-map">
      <title>Routes Used Most Frequently Visualized with a Static Heat
      Map</title>
      <para>
        We can visualize the routes used by ships with a heat map
        generated from individual GPS points of the ships. This approach
        is quite costly, so we will use TABLESAMPLE SYSTEM to specify an
        approximate percentage of the data to use. If the frequency of
        locations returned varies in different areas, a heatmap using
        individual datapoints could be misleading without further data
        pre-processing. An alternative approach could be to use the
        postGIS
         <ulink url="https://postgis.net/docs/ST_AsGeoJSON.html">ST_AsGeoJSON</ulink>
        to generate shapes in geoJSON format which can be used in
         <ulink url="https://grafana.com/grafana/plugins/grafana-worldmap-panel/">Grafanaâ€™s
        World Map Panel plugin</ulink>.
      </para>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Add a panel, select DanishAIS as the data source and Format
            As Table.
          </para>
        </listitem>
        <listitem>
          <para>
            Using Edit SQL, add the following SQL code:
          </para>
          <programlisting language="sql">
-- NOTE: TABLESAMPLE SYSTEM(40) returns ~40% of the data.
SELECT
  latitude,
  longitude,
  mmsi
FROM aisinputfiltered TABLESAMPLE SYSTEM (40)
</programlisting>
        </listitem>
        <listitem>
          <para>
            Change the visualization type to
            <emphasis>Geomap</emphasis>.
          </para>
        </listitem>
        <listitem>
          <para>
            On the map, zoom in to fit the data points into the frame
            and modify the following visualization options:
          </para>
          <para>
            <emphasis role="strong">Panel Options:</emphasis>
          </para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>
                Title: Route Usage Frequency
              </para>
            </listitem>
          </itemizedlist>
          <para>
            <emphasis role="strong">Map View:</emphasis>
          </para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>
                Use current map setting (this will use the current zoom
                and positioning level as default)
              </para>
            </listitem>
            <listitem>
              <para>
                Share View: enable (this will sync up the movement and
                zoom across multiple maps on the same dashboard)
              </para>
            </listitem>
          </itemizedlist>
          <figure>
            <title>Setting initial view in map view dialogue box</title>
            <mediaobject>
              <imageobject>
                <imagedata width='50%' fileref="images/SettingInitialViewInMapViewDialogueBox.png" />
              </imageobject>
              <textobject><phrase>Setting initial view in map view
              dialogue box</phrase></textobject>
            </mediaobject>
          </figure>
          <para>
            <emphasis role="strong">Data Layer:</emphasis>
          </para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>
                Layer type: Heatmap
              </para>
            </listitem>
            <listitem>
              <para>
                Location: Coords
              </para>
            </listitem>
            <listitem>
              <para>
                Latitude field: latitude
              </para>
            </listitem>
            <listitem>
              <para>
                Longitude field: longitude
              </para>
            </listitem>
            <listitem>
              <para>
                Weight values: 0.1
              </para>
            </listitem>
            <listitem>
              <para>
                Radius: 1
              </para>
            </listitem>
            <listitem>
              <para>
                Blur: 5
              </para>
            </listitem>
          </itemizedlist>
          <figure>
            <title>Setting up heat-map in data layer dialogue
            box</title>
            <mediaobject>
              <imageobject>
                <imagedata width='50%' fileref="images/SettingUpHeatMapInDataLayerDialogueBox.png" />
              </imageobject>
              <textobject><phrase>Setting up heat-map in data layer
              dialogue box</phrase></textobject>
            </mediaobject>
          </figure>
          <para>
            <emphasis role="strong">Standard Options:</emphasis>
          </para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>
                Color scheme: Blue-Yellow-Red (by value).
              </para>
            </listitem>
          </itemizedlist>
          <figure>
            <title>Choosing color scheme in standard options dialogue
            box</title>
            <mediaobject>
              <imageobject>
                <imagedata width='50%' fileref="images/ChoosingColorSchemeInStandardOptionsDialogueBox.png" />
              </imageobject>
              <textobject><phrase>Choosing color scheme in standard
              options dialogue box</phrase></textobject>
            </mediaobject>
          </figure>
        </listitem>
      </orderedlist>
      <para>
        The final visualization will look like the screenshot below.
      </para>
      <para>
        <emphasis>Note: The number of datapoints rendered can be manipulated by
        changing the parameter of the TABLESAMPLE SYSTEM() call in the
          query.</emphasis>
      </para>
      <figure>
        <title>Route usage frequency heat-map visualization</title>
        <mediaobject>
          <imageobject>
            <imagedata width='90%' fileref="images/RouteUsageFrequencyHeatMapVisualization.png" />
          </imageobject>
          <textobject><phrase>Route usage frequency heat-map
          visualization</phrase></textobject>
        </mediaobject>
      </figure>
    </section>
    <section xml:id="number-of-boats-moving-through-a-given-area">
      <title>Number of Boats Moving Through a Given Area</title>
      <orderedlist numeration="arabic">
        <listitem>
          <para>
            Create a new panel, and set DanishAIS as the Source, Format
            as: <quote>Table</quote>.
          </para>
        </listitem>
        <listitem>
          <para>
            Select visualization as: <quote>Geomap</quote>
          </para>
        </listitem>
        <listitem>
          <para>
            Add this SQL in the <quote>SQL editor</quote> section
          </para>
          <programlisting language="sql">
-- Table with bounding boxes over regions of interest
WITH ports(port_name, port_geom, lat, lng)
       AS (SELECT p.port_name, p.port_geom, lat, lng
           FROM
             -- ST_MakeEnvelope creates geometry against which to check intersection
             (VALUES ('Rodby',
                    ST_MakeEnvelope(651135, 6058230, 651422, 6058548, 25832)::geometry,
                    54.53, 11.06),
                   ('Puttgarden',
                    ST_MakeEnvelope(644339, 6042108, 644896, 6042487, 25832)::geometry,
                    54.64, 11.36)) AS p(port_name, port_geom, lat, lng))

-- p.lat and p.lng will be used to place the port location on the visualization
SELECT P.port_name,
       sum(numSequences(atGeometry(S.Trip, P.port_geom))) AS trips_intersect_with_port,
       p.lat,
       p.lng
FROM ports AS P,
     Ships AS S
WHERE eintersects(S.Trip, P.port_geom)
GROUP BY P.port_name, P.lat, P.lng
</programlisting>
          <para>
            <emphasis>Note: You will see queries are build using the
            WITH statement (common table expressions - CTE). This helps
            to break the query down into parts, and also helps make it
            easier to understand by others.</emphasis>
          </para>
        </listitem>
        <listitem>
          <para>
            The options (visualization settings - on the right side of
            the screen) should be as follows:
          </para>
          <para>
            <emphasis role="strong">Data Layer</emphasis>
          </para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>
                Layer type: â†’ <quote>markers</quote>
              </para>
            </listitem>
            <listitem>
              <para>
                Style Size: â†’ <quote>Fixed</quote> and value: 20
              </para>
            </listitem>
            <listitem>
              <para>
                Color: â†’ <quote>trips_intersect_with_port</quote> (This
                will color points on the map based on this value)
              </para>
            </listitem>
          </itemizedlist>
          <para>
            <emphasis role="strong">Standard options</emphasis>
          </para>
          <itemizedlist spacing="compact">
            <listitem>
              <para>
                Min â†’ 88
              </para>
            </listitem>
            <listitem>
              <para>
                Max â†’ 97
              </para>
            </listitem>
            <listitem>
              <para>
                Color scheme â†’ <quote>Green-Yellow-Red (by
                value)</quote>
              </para>
            </listitem>
          </itemizedlist>
          <para>
            <emphasis>Note: At the writing of this tutorial, the Geomap
            plugin is in beta and has some minor bugs with how colors
            are rendered based when the <quote>Min</quote> and
            <quote>Max</quote> values are auto calculated.</emphasis>
          </para>
        </listitem>
      </orderedlist>
      <para>
        In the visualization below we can see port Rodby has a higher
        number of ships coming and going to it and thatâ€™s why it is
        colored red. This visualization can show relative activity of
        ships in regions and ports.
      </para>
      <figure>
        <title>Frequency intersecting with geometric envelop
        visualization</title>
        <mediaobject>
          <imageobject>
            <imagedata width='70%' fileref="images/FrequencyIntersectingWithGeometricEnvelopVisualization.png" />
          </imageobject>
          <textobject><phrase>Frequency intersecting with geometric
          envelop visualization</phrase></textobject>
        </mediaobject>
      </figure>
    </section>
    <section xml:id="boats-in-close-proximity-in-a-given-time-range">
      <title>Boats in Proximity in a Given Time Range</title>
      <para>
        Follow the similar steps to add a Geomap panel as before, we
        include the following SQL script:
      </para>
      <programlisting language="sql">
-- 2 CTEs are help to make these queries user-friendly; TimeShips and TimeClosestShips.
WITH
  -- The TimeShips CTE returns the data for a time period from 1am to 6:30am
  TimeShips AS (
    SELECT
      MMSI,
      atTime(S.Trip, tstzspan '[2018-01-04 01:00:00, 2018-01-04 06:30:00)' ) AS trip
    FROM
      Ships S
),
  -- The TimeClosestShips CTE returns the time, location, and closest distance of the boats
  -- that are within 300m of each other. Note the use of dwithin in the WHERE clause
  -- improves performance by limiting the computation to only those ships that were within
  -- 300m.
  TimeClosestShips AS (
    SELECT
      S1.MMSI AS &quot;boat1&quot;, S2.MMSI AS &quot;boat_2&quot;,
      startValue( atMin(S1.trip &lt;-&gt; S2.trip)) AS closet_distance,
      startTimestamp( atMin(S1.trip &lt;-&gt; S2.trip)) AS time_at_closest_dist,
      S1.trip AS &quot;b1_trip&quot;,
      S2.trip AS &quot;b2_trip&quot;
    FROM
      TimeShips S1, TimeShips S2
    WHERE
      S1.MMSI &gt; S2.MMSI AND
      edwithin(S1.Trip, S2.Trip, 300)
)
-- The final SELECT is used to project the time_at_closest_distance onto the sequence of
-- locations to return the lat and long of both ships.
SELECT  t.boat1, t.boat_2, t.closet_distance, t.time_at_closest_dist,
  ST_X( ST_Transform( valueAtTimestamp(b1_trip, time_at_closest_dist), 4326) ) AS b1_lng,
  ST_Y( ST_Transform( valueAtTimestamp(b1_trip, time_at_closest_dist), 4326) ) AS b1_lat,
  ST_X( ST_Transform( valueAtTimestamp(b2_trip, time_at_closest_dist), 4326) ) AS b2_lng,
  ST_Y( ST_Transform( valueAtTimestamp(b2_trip, time_at_closest_dist), 4326) ) AS b2_lat
        
FROM TimeClosestShips t;
</programlisting>
      <para>
        To add the points to the map modify the following options:
      </para>
      <para>
        <emphasis role="strong">Panel Options:</emphasis>
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Title: Ships within 300m
          </para>
        </listitem>
      </itemizedlist>
      <para>
        <emphasis role="strong">Map View:</emphasis>
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Share view: enabled
          </para>
        </listitem>
      </itemizedlist>
      <para>
        <emphasis role="strong">Data Layer:</emphasis>
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Layer 1: rename to Boat1
          </para>
        </listitem>
        <listitem>
          <para>
            Layer type: Heatmap
          </para>
        </listitem>
        <listitem>
          <para>
            Location: Coords
          </para>
        </listitem>
        <listitem>
          <para>
            Latitude field: b1_lat
          </para>
        </listitem>
        <listitem>
          <para>
            Longitude field: b1_lng
          </para>
        </listitem>
        <listitem>
          <para>
            Radius: 5
          </para>
        </listitem>
        <listitem>
          <para>
            Blur: 15
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Click on <quote>+ Add layer</quote> to add another heat map
        layer to the data, this time using b2_lat and b2_long as the
        coordinates. We can also add a layer to show the precise
        locations with markers for both ships (using b1_lat, b1_lng,
        b2_lat and b2_long), setting each marker to a different color.
        For the Boat 1 and Boat 2 Locations, we use the following
        options:
      </para>
      <para>
        <emphasis role="strong">Data Layer:</emphasis>
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            Value: 1
          </para>
        </listitem>
        <listitem>
          <para>
            Color: select different color for each boat.
          </para>
        </listitem>
      </itemizedlist>
      <figure>
        <title>Multiple layers in data layers dialogue box</title>
        <mediaobject>
          <imageobject>
            <imagedata width='50%' fileref="images/MultipleLayersInDataLayersDialogueBox.png" />
          </imageobject>
          <textobject><phrase>Multiple layers in data layers dialogue
          box</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        The final visualization looks like the below.
      </para>
      <figure>
        <title>Visualization of ships within 300m using heat-map</title>
        <mediaobject>
          <imageobject>
            <imagedata width='70%' fileref="images/VisualizationOfShipsWithin300mUsingHeatMap.png" />
          </imageobject>
          <textobject><phrase>Visualization of ships within 300m using
          heat-map</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        Itâ€™s helpful to include the tooltip for layers to allow users to
        see the data behind the visualization, which helps in
        interpretation and is a good way for subject-matter-experts to
        provide concrete feedback. Using the tooltip, we can quickly see
        that the same ship can be within 300m to multiple other ships in
        the same time frame (as seen in the screenshot below). This can
        result in a higher frequency of results in a heat map view than
        expected. SQL queries should be modified to ensure they are
        correctly interpreted.
      </para>
      <para>
        Not surprisingly, we see there are lots of results for proximity
        within ports. We could avoid including results in ports by
        excluding all results that occur within envelopes defined by
        ST_MakeEnvelope, as seen in the previous queries.
      </para>
      <figure>
        <title>Multiple results for the same ship at various times while
        in a port</title>
        <mediaobject>
          <imageobject>
            <imagedata width='70%' fileref="images/MultipleResultsForTheSameShipAtVariousTimesWhileInAPort.png" />
          </imageobject>
          <textobject><phrase>Multiple results for the same ship at
          various times while in a port</phrase></textobject>
        </mediaobject>
      </figure>
    </section>
  </section>
  <section xml:id="dynamic-dashboards---creating-variables">
    <title>Dynamic Dashboards - Creating Variables</title>
    <para>
      We can use variables in Grafana to manipulate time-ranges that are
      used as inputs to MobilityDB queries. Weâ€™ll create a drop-down
      type variable called
      <emphasis role="strong"><quote>FromTime</quote></emphasis> that
      will be used as an input for the time period within which a query
      returns results.
    </para>
    <orderedlist numeration="arabic">
      <listitem>
        <para>
          In the dashboard window, click <quote>Dashboard
          settings</quote> icon; the gear symbol, on the
          top-slightly-right of the window.
        </para>
        <figure>
          <title>Dashboard settings gear box</title>
          <mediaobject>
            <imageobject>
              <imagedata width='70%' fileref="images/DashboardSettingsGearBox.png" />
            </imageobject>
            <textobject><phrase>Dashboard settings gear
            box</phrase></textobject>
          </mediaobject>
        </figure>
      </listitem>
      <listitem>
        <para>
          Click on the <quote>Variables</quote> in the next window on
          the top-left side of the screen.
        </para>
        <figure>
          <title>Selecting Variables in dashboard settings</title>
          <mediaobject>
            <imageobject>
              <imagedata width='30%' fileref="images/SelectingVariablesInDashboardSettings.png" />
            </imageobject>
            <textobject><phrase>Selecting Variables in dashboard
            settings</phrase></textobject>
          </mediaobject>
        </figure>
      </listitem>
      <listitem>
        <para>
          Youâ€™ll see a screen that explains the variables in Grafana and
          also points to the
           <ulink url="https://grafana.com/docs/grafana/latest/variables/">Templates
          and variables documentation</ulink>. Click on the <quote>Add
          variable</quote> button.
        </para>
      </listitem>
      <listitem>
        <para>
          In <quote>General</quote>
        </para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>
              Name â†’ FromTime
            </para>
          </listitem>
          <listitem>
            <para>
              Type â†’ Custom
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>
          In <quote>Custom options</quote> we will manually add all the
          time ranges with 1 hour increment. e.g.Â <quote>2018-01-04
          00:00:00, 2018-01-04 01:00:00 â€¦ 2018-01-04 23:00:00</quote>
        </para>
      </listitem>
      <listitem>
        <para>
          You get a screen like below. Towards the bottom there is also
          a <quote>Preview of values</quote> that shows what the
          drop-down options will look like for the variable you created.
          In this case, we are creating the timestamps in the same
          format that MobilityDB will accept.
        </para>
        <figure>
          <title>Creating user-defined list of custom variables</title>
          <mediaobject>
            <imageobject>
              <imagedata width='80%' fileref="images/CreatingUserDefinedListOfCustomVariables.png" />
            </imageobject>
            <textobject><phrase>Creating user-defined list of custom
            variables</phrase></textobject>
          </mediaobject>
        </figure>
      </listitem>
      <listitem>
        <para>
          We can create another variable called <quote>ToTime</quote>
          with values shifted 1 hour. So the starting value would be
          <quote>2018-01-04 01:00:00</quote> and the final value will be
          <quote>2018-01-05 00:00:00</quote>.
        </para>
      </listitem>
    </orderedlist>
    <para>
      Now we can modify some queries by including the newly
      created variables which will return results from a specific time
      window. We have now provided a user with the ability to
      dynamically modify visualization queries and slice through time.
    </para>
    <section xml:id="dynamic-query-number-of-boats-moving-through-a-given-area-in-a-certain-time-period">
      <title>Dynamic Query: Number of Boats Moving Through a Given Area
      in a Certain Time Period</title>
      <para>
        In the query code we just need to make slight changes for it to
        take time values from the variables. In the original query,
        shown below:
      </para>
      <programlisting language="sql">
SELECT P.port_name, 
      sum( numSequences( atGeometry( S.Trip, P.port_geom))) AS trips_intersect_with_port,
      p.lat,
      p.lng
FROM ports AS P, Ships AS S
WHERE eintersects(S.Trip, P.port_geom)
GROUP BY P.port_name, P.lat, P.lng
</programlisting>
      <para>
        We just need to modify the trips_intersect_with_port parameter
        in the SELECT statement to look like:
      </para>
      <programlisting language="sql">
sum
(numSequences(atGeometry( atTime(S.Trip, tstzspan '[$FromTime, $ToTime)'), P.port_geom)))
    AS trips_intersect_with_port
</programlisting>
      <para>
        Essentially we just wrapped <quote>S.Trip</quote> with
        <quote>atTime()</quote> and passed our custom tstzspan range.
        The full query with this modification is below:
      </para>
      <programlisting language="sql" xml:space="preserve">
-- Table with bounding boxes over regions of interest
WITH ports(port_name, port_geom, lat, lng)
       AS (SELECT p.port_name, p.port_geom, lat, lng
           FROM
             (VALUES ('Rodby',
                    ST_MakeEnvelope(651135, 6058230, 651422, 6058548, 25832)::geometry,
                    54.53, 11.06),
                   ('Puttgarden',
                    ST_MakeEnvelope(644339, 6042108, 644896, 6042487, 25832)::geometry,
                    54.64, 11.36)) AS p(port_name, port_geom, lat, lng))

SELECT P.port_name,
       sum(numSequences(atGeometry(atTime(S.Trip, tstzspan '[$FromTime, $ToTime)'),
                                   P.port_geom))) AS trips_intersect_with_port,
       p.lat,
       p.lng
FROM ports AS P,
     Ships AS S
WHERE eintersects(S.Trip, P.port_geom)
GROUP BY P.port_name, P.lat, P.lng
</programlisting>
      <para>
        We can select the start time, <quote>FromTime</quote> â†’
        <quote>2018-01-04 02:00:00</quote> &amp; <quote>ToTime</quote> â†’
        <quote>2018-01-04 06:00:00</quote> . As we can see below, the
        port Rodby has less activity during this period and thatâ€™s why
        it is green now. But overall Rodby has more activity so when we
        look at the entire days data it is colored red.
      </para>
      <figure>
        <title>Visualization of geometry intersection using dynamic
        variables</title>
        <mediaobject>
          <imageobject>
            <imagedata width='70%' fileref="images/VisualizationOfGeometryIntersectionUsingDynamicVariables.png" />
          </imageobject>
          <textobject><phrase>Visualization of geometry intersection
          using dynamic variables</phrase></textobject>
        </mediaobject>
      </figure>
    </section>
    <section xml:id="global-variables">
      <title>Global Variables</title>
      <para>
        Grafana also has some
         <ulink url="https://grafana.com/docs/grafana/latest/variables/variable-types/global-variables/">built-in
        variables (global variables)</ulink> that can be used to
        accomplish the same thing we did with custom variables. We can
        use the global variables ${__from:date} and ${__to:date} instead
        of the $FromTime and $ToTime we created. The time range can then
        be modified with the time range options in the top right of the
        dashboard.
      </para>
      <figure>
        <title>Assigning time range using global variables</title>
        <mediaobject>
          <imageobject>
            <imagedata width='70%' fileref="images/AssigningTimeRangeUsingGlobalVariables.png" />
          </imageobject>
          <textobject><phrase>Assigning time range using global
          variables</phrase></textobject>
        </mediaobject>
      </figure>
      <para>
        <emphasis>Note: It is important to be aware of the timezone used
        for the underlying data relative to the queries for global
        variables. Time zones can be adjusted at the bottom of the time
        range selection, <quote>Change time settings</quote>. For this
        example, we change the time zone to UTC to match our
        dataset.</emphasis>
      </para>
    </section>
  </section>
  <section xml:id="final-dashboard">
    <title>Final Dashboard</title>
    <para>
      The final dashboard will look like this. Note there are a couple
      additional query views that were not covered explicitly in the
      workshop.
    </para>
    <figure>
      <title>Full Dashboard</title>
      <mediaobject>
        <imageobject>
          <imagedata width='100%' fileref="images/FullDashboard.png" />
        </imageobject>
        <textobject><phrase>Full Dashboard</phrase></textobject>
      </mediaobject>
    </figure>
  </section>
</chapter>
