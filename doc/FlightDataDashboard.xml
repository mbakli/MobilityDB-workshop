<?xml version="1.0" encoding="utf-8" ?>
<chapter id="FlightDataDashboard">
    <title>Managing Flight Data and Creating Dashboard with Grafana</title>
    <section>
        <title>Contents</title>
        <para>
            The module covers the following topics in 3 parts:
        </para>
        <para>
            <emphasis role="strong">Part 1 - Data and Environment Preparation</emphasis>
        </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    Preparing the Database
                </para>
            </listitem>
            <listitem>
                <para>
                    Data Cleaning
                </para>
            </listitem>
            <listitem>
                <para>
                    Setting up the Dashboard and Connecting to Data Source
                </para>
            </listitem>
        </itemizedlist>
            <para>
                <emphasis role="strong">Part 2 - Working with Discrete Points</emphasis>
            </para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    Visualizing time-series data for a single airplane
                </para>
            </listitem>
            <listitem>
                <para>
                    Visualizing discrete geographic points on a map
                </para>
            </listitem>
        </itemizedlist>
        <para>
            <emphasis role="strong">Part 3 - Working with Continuous Trajectories in MobilityDB</emphasis>
        </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    Creating trajectories for individual flights
                </para>
            </listitem>
            <listitem>
                <para>
                    Visualizing statistics from temporal aggregations
                </para>
            </listitem>
            <listitem>
                <para>
                    Visualizing statistics from multiple queries returning temporal aggregations
                </para>
            </listitem>
            <listitem>
                <para>
                    Returning value changes from temporal data
                </para>
            </listitem>
            <listitem>
                <para>
                    Visualizing spatial statistics from nested temporal conditions (intrinsic and dynamic)
                </para>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>Tools</title>
        <para>
            The tools used in this module are as follows:
        </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    MobilityDB, on top of PostgreSQL and PostGIS
                </para>
            </listitem>
            <listitem>
                <para>
                    Grafana (version 9.0.7)
                </para>
            </listitem>
        </itemizedlist>
    </section>
    <section>
    <title>Part 1 - Data and Environment Preparation</title>
    <section>
        <title>Preparing the Database</title>
        <para>
            The opensky data can be found in this <ulink url="https://opensky-network.org/datasets/states/2020-06-01/">Dataset
                link
            </ulink>.
        </para>
        <para>
            Create a new database <quote>opensky</quote>, then use your SQL
            editor to create the MobilityDB extension as follows:
        </para>
        <programlisting language="sql">
CREATE EXTENSION MobilityDB CASCADE;
        </programlisting>
        <para>
            The CASCADE command will additionally create the PostGIS
            extension.
        </para>
        <para>
            Now create a table in which the CSV file will be loaded:
        </para>
        <programlisting language="sql">
CREATE TABLE flights(
    et              bigint,
    icao24          varchar(20),
    lat             float,
    lon             float,
    velocity        float,
    heading         float,
    vertrate        float,
    callsign        varchar(10),
    onground        boolean,
    alert           boolean,
    spi             boolean,
    squawk          integer,
    baroaltitude    numeric(7,2),
    geoaltitude     numeric(7,2),
    lastposupdate   numeric(13,3),
    lastcontact     numeric(13,3)
);
</programlisting>
    <para>
      Load the data into the database using the following command.
      Replace the <literal>&lt;path_to_file&gt;</literal> with the
      actual path of the CSV file. Do this for all files. As before, if this command
      throws a permission error, you can use the <varname>\copy</varname> command
      from the <varname>psql</varname> shell.
    </para>
    <programlisting language="sql">
COPY flights(et, icao24, lat, lon, velocity, heading,
		 vertrate, callsign, onground, alert, spi, squawk,
		 baroaltitude, geoaltitude, lastposupdate, lastcontact)
FROM '&lt;path_to_file&gt;' DELIMITER  ',' CSV HEADER;
</programlisting>
    <para>
      All the times in this dataset are in unix timestamp (an integer)
      with timezone being UTC. So we need to convert them to PostgreSQL
      timestamp type.
    </para>
    <programlisting language="sql">
ALTER TABLE flights
    ADD COLUMN et_ts timestamp,
    ADD COLUMN lastposupdate_ts timestamp,
    ADD COLUMN lastcontact_ts timestamp;

UPDATE flights
    SET et_ts = to_timestamp(et),
        lastposupdate_ts = to_timestamp(lastposupdate),
        lastcontact_ts = to_timestamp(lastcontact);
</programlisting>
    <para>
      You can check the size of the database with:
    </para>
    <programlisting language="sql">
SELECT pg_size_pretty( pg_total_relation_size('flights') );
        </programlisting>
            </section>
        <section>
            <title>Data Cleaning</title>
            <para>
                Delete all icao24 that have all NULL latitudes
            </para>
            <programlisting language="sql">
-- icao24_with_null_lat is used to provide a list of rows that will be deleted
WITH icao24_with_null_lat AS (
    SELECT icao24, COUNT(lat)
    FROM flights
    GROUP BY icao24
    HAVING COUNT(lat) = 0
      )
DELETE
FROM flights
WHERE icao24 IN
-- this SELECT statement is needed for the IN statement to compare against a list
(SELECT icao24 FROM icao24_with_null_lat);
            </programlisting>
            <para>
                Note: This data cleaning is not comprehensive. It was just to
                highlight that before creating trajectories, it may be very
                important to have a look at the data and do some cleaning as
                that will directly impact the quality of mobilityDB trajectories
                being created. If there as NULLs in mobilityDB trajectories,
                some operation on it can give error.
            </para>
        </section>
    <section>
        <title>Setting up the Dashboard and Connecting to Data
            Source
        </title>
        <para>
            Data for the workshop is loaded into a MobilityDB database hosted
            on Azure, with all login information provided in the
            <ulink url="https://www.notion.so/Dashboard-and-Visualization-of-Ship-Trajectories-AIS-246e16838096443ea2bfa9be554a9a44">
                Sign-in
                and Connect to Data Source
            </ulink>
            section below.
        </para>
        <para>
            The workshop is using the following settings in Grafana to connect
            to the postgres server on Azure. More detailed instruction to
            set up Grafana can be found in section 2.3 to 2.5 of the Dashboard
            and Visualization of Ship Trajectories (AIS) workshop.
        </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    Name: OpenSkyLOCAL
                </para>
            </listitem>
            <listitem>
                <para>
                    Host:
                    <emphasis>20.79.254.53:5432</emphasis>
                </para>
            </listitem>
            <listitem>
                <para>
                    Database: opensky
                </para>
            </listitem>
            <listitem>
                <para>
                    User:
                    <emphasis>mobilitydb-guest</emphasis>
                </para>
            </listitem>
            <listitem>
                <para>
                    Password:
                    <emphasis>mobilitydb@guest</emphasis>
                </para>
            </listitem>
            <listitem>
                <para>
                    TLS/SSL Mode:
                    <emphasis>disable</emphasis>
                </para>
            </listitem>
            <listitem>
                <para>
                    Version:
                    <emphasis>12+</emphasis>
                </para>
            </listitem>
        </itemizedlist>
        <para>
            The data used for this workshop provided by
            <ulink url="http://www.opensky-network.org">The OpenSky
                Network</ulink>. This is data from a 24hr period from June 1, 2020
            (<ulink url="https://opensky-network.org/datasets/states/2020-06-01/">dataset
            link</ulink>). The raw data is originally provided in separate CSV
            documents for each hour of the day.
        </para>
        <para>
            Open a new browser and go to
            <ulink url="http://localhost:3000/">http://localhost:3000/</ulink>
            to work in your instance of Grafana. With a new dashboard we can
            start creating the panels below.
        </para>
    </section>
    </section>
  <section>
    <title>Part 2 - Working with Discrete Points</title>
    <section>
        <title>Visualizing 24hr Flight Pattern of Single Airplane</title>
        <para>
            We will start by looking at a single airplane. Grafana proves to
            be a good way to quickly visualize our dataset and can be useful
            to support pre-processing and cleaning. If using a connection to
            the Azure database, required tables are already created.
        </para>
        <para>
            A full description of each parameter is included in the
            <ulink url="https://opensky-network.org/datasets/states/README.txt">OpenSky
                original dataset readme</ulink>. The table structure in the Azure
            dataset after loading and transformations looks like the
            following:
        </para>
        <figure>
            <title>First row of table <quote>single_airframe</quote>, with
                24hrs of flight information for airplane
                <quote>c827a6</quote>
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata width='40%' fileref="images/SingleAirframeRow1.png"/>
                </imageobject>
                <textobject>
                    <phrase>First row of table
                        <quote>single_airframe</quote>, with 24hrs of flight information
                        for airplane
                        <quote>c827a6</quote>
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
        <figure>
            <title>Full table <quote>single_airframe_traj</quote> for airplane
                <quote>c827a6</quote>
                with data in mobilityDB trajectories
                format
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata width='80%' fileref="images/SingleAirframeTrajTable.png"/>
                </imageobject>
                <textobject>
                    <phrase>Full table
                        <quote>single_airframe_traj</quote>
                        for airplane
                        <quote>c827a6</quote>
                        with data in mobilityDB trajectories
                        format
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
        <figure>
            <title>First row of table <quote>flight_traj_sample</quote>, which
                includes 200 flight trajectories.
            </title>
            <mediaobject>
                <imageobject>
                    <imagedata width='80%' fileref="images/FlightTrajSampleTable.png"/>
                </imageobject>
                <textobject>
                    <phrase>First row of table
                        <quote>flight_traj_sample</quote>, which includes 200 flight
                        trajectories.
                    </phrase>
                </textobject>
            </mediaobject>
        </figure>
        <section>
            <title>Change Timezone in Grafana</title>
            <para>
                Make Sure you are visualizing the data in the correct timezone.
                The data we had was in UTC. To change the timezone,
            </para>
            <orderedlist numeration="arabic">
                <listitem>
                    <para>
                        Click on the time-range panel on the top-right of the
                        window.
                    </para>
                    <figure>
                        <title>Grafana time range panel</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata width='60%' fileref="images/GrafanaTimerangePanelOpen.png"/>
                            </imageobject>
                            <textobject>
                                <phrase>Grafana time range
                                    panel
                                </phrase>
                            </textobject>
                        </mediaobject>
                    </figure>
                </listitem>
                <listitem>
                    <para>
                        In the pop-up window, on the bottom there is <quote>Change
                        time settings</quote>. Click that to set the desired
                        timezone.
                    </para>
                </listitem>
            </orderedlist>
        </section>
        <section>
            <title>Visualize the Coordinates of a Single Airplane</title>
            <para>
                Let’s visualize the latitude and longitude coordinates of an
                airplane’s journey throughout the day. For this one we will not
                color the geo-markers, but it is possible to color them using
                some criterion.
            </para>
            <orderedlist numeration="arabic">
                <listitem>
                    <para>
                        Add a new panel
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Select <quote>OpenSkyLOCAL</quote> as the data source
                    </para>
                </listitem>
                <listitem>
                    <para>
                        In Format as, change <quote>Time series</quote> to
                        <quote>Table</quote>
                        and choose
                        <quote>Edit SQL</quote>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Here you can add your SQL queries. Let’s replace the existing
                        query with the following SQL script:
                    </para>
                    <programlisting language="sql">
-- icao24 is the unique identifier for each airframe (airplane)
SELECT et_ts, icao24, lat, lon
-- TABLESAMPLE SYSTEM (n) returns only n% of the data from the table.
FROM flights TABLESAMPLE SYSTEM (5)
WHERE icao24 IN ('738286') AND $__timeFilter(et_ts)
                    </programlisting>
                </listitem>
                <listitem>
                    <para>
                        Change the visualization type to
                        “<emphasis>Geomap”</emphasis>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The options (visualization settings - on the right side of
                        the screen) should be as follows:
                    </para>
                    <para>
                        <emphasis role="strong">Panel Options</emphasis>
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Title →GPS location over time
                            </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        <emphasis role="strong">Map View</emphasis>
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Initial view: For this one zoom in on the visualization
                                on the panel as you see fit and then click <quote>use
                                current map settings
                            </quote> button.
                            </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        <emphasis role="strong">Data Layer</emphasis>
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Layer type: →
                                <quote>markers</quote>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Style size → Fixed Value: 2
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Color → Green
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </orderedlist>
            <para>
                In this visualization we can see that the airplane is visiting
                different countries and almost completing a loop. This indicates
                that there are more than 1 trips (flights) completed by this
                single airplane. The coordinates are sparse because we are
                sampling the results using
                <quote>TABLESAMPLE SYSTEM (5)</quote>
                in our query. This is done to speed up the visualization.
            </para>
            <figure>
                <title>Single airframe geopoints vs time</title>
                <mediaobject>
                    <imageobject>
                        <imagedata width='80%' fileref="images/SingleAirframeGeopointsVsTime.png"/>
                    </imageobject>
                    <textobject>
                        <phrase>Single airframe geopoints vs
                            time
                        </phrase>
                    </textobject>
                </mediaobject>
            </figure>
        </section>
    </section>
    <section>
        <title>Time-series Graphs for a Single Airplane</title>
        <section>
            <title>Velocity vs Time</title>
            <para>
                Following the similar steps to add a Geomap panel as before, we
                include the following SQL script. Note $__timeFilter() is a
                Grafana global variable. This global variable will inject time
                constraint SQL-conditions from Grafana’s time range panel.
            </para>
            <orderedlist numeration="arabic" spacing="compact">
                <listitem>
                    <para>
                        In Format as, use
                        <quote>Time series</quote>
                    </para>
                </listitem>
            </orderedlist>
            <programlisting language="sql">
SELECT
  et_ts AS &quot;time&quot;,
  velocity
FROM flights
WHERE icao24 = 'c827a6' AND $__timeFilter(et_ts)
            </programlisting>
            <orderedlist numeration="arabic">
                <listitem>
                    <para>
                        Change the visualization type to <quote>Time Series</quote>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The options (visualization settings - on the right side of
                        the screen) should be as follows:
                    </para>
                    <para>
                        <emphasis role="strong">Panel Options</emphasis>
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Title → Single AirFrame - Velocity vs Time
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </orderedlist>
            <para>
                In the visualization we can see clearly that on this day, this
                airframe took 3 flights. That is why its speed curve has 3
                humps. The zero speed towards the end of each hump is a clear
                indicator that plane stopped, thus it must have completed its
                flight.
            </para>
            <figure>
                <title>Single airframe velocity vs time</title>
                <mediaobject>
                    <imageobject>
                        <imagedata width='80%' fileref="images/SingleAirframeVelocityVsTime.png"/>
                    </imageobject>
                    <textobject>
                        <phrase>Single airframe velocity vs
                            time
                        </phrase>
                    </textobject>
                </mediaobject>
            </figure>
        </section>
        <section>
            <title>Altitude vs Time</title>
            <para>
                Follow the similar steps to add a Geomap panel as before, we
                include the following SQL script.
            </para>
            <orderedlist numeration="arabic" spacing="compact">
                <listitem>
                    <para>
                        In Format as, we have
                        <quote>Time series</quote>
                    </para>
                </listitem>
            </orderedlist>
            <programlisting language="sql">
SELECT
  et_ts AS &quot;time&quot;,
  baroaltitude, geoaltitude
FROM flights
WHERE icao24 = 'c827a6' AND $__timeFilter(et_ts)
            </programlisting>
            <orderedlist numeration="arabic">
                <listitem>
                    <para>
                        Change the visualization type to <quote>Time Series</quote>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The options (visualization settings - on the right side of
                        the screen) should be as follows:
                    </para>
                    <para>
                        <emphasis role="strong">Panel Options</emphasis>
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Title → Single AirFrame - Altitude vs Time
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </orderedlist>
            <para>
                In the visualization we can again see that on this day, the
                airframe took 3 flights, as altitude reaches zero between each
                flight. There is some noise in the data, which appear as spikes.
                This would be almost impossible to spot in a tabular format, but
                on a line graph these data anomalies can be easily identified.
            </para>
            <figure>
                <title>Single airframe altitude vs time</title>
                <mediaobject>
                    <imageobject>
                        <imagedata width='80%' fileref="images/SingleAirframeAltitudeVsTime.png"/>
                    </imageobject>
                    <textobject>
                        <phrase>Single airframe altitude vs
                            time
                        </phrase>
                    </textobject>
                </mediaobject>
            </figure>
        </section>
        <section>
            <title>Vertical-Rate vs Time</title>
            <para>
                Follow the similar steps to add a Geomap panel as before, we
                include the following SQL script.
            </para>
            <orderedlist numeration="arabic" spacing="compact">
                <listitem>
                    <para>
                        In Format as, we have
                        <quote>Time series</quote>
                    </para>
                </listitem>
            </orderedlist>
            <programlisting language="sql">
SELECT
  et_ts AS &quot;time&quot;,
  vertrate
FROM flights
WHERE icao24 = 'c827a6' AND $__timeFilter(et_ts)
            </programlisting>
            <orderedlist numeration="arabic">
                <listitem>
                    <para>
                        Change the visualization type to <quote>Time Series</quote>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The options (visualization settings - on the right side of
                        the screen) should be as follows:
                    </para>
                    <para>
                        <emphasis role="strong">Panel Options</emphasis>
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Title → Single AirFrame - Verticle-Rate vs Time
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </orderedlist>
            <para>
                The positive values here represents the ascent of the plane.
                While at cruising altitude, the plane has almost zero
                vertical-rate and during decent this value becomes negative. So
                a sequence of positive values, then zero values followed by
                negative values would represent a single flight.
            </para>
            <figure>
                <title>Single airframe vertrate vs time</title>
                <mediaobject>
                    <imageobject>
                        <imagedata width='80%' fileref="images/SingleAirframeVertrateVsTime.png"/>
                    </imageobject>
                    <textobject>
                        <phrase>Single airframe vertrate vs
                            time
                        </phrase>
                    </textobject>
                </mediaobject>
            </figure>
        </section>
        <section>
            <title>Callsign vs Time</title>
            <para>
                The callsign is a unique identifier used for a specific flight
                path. For example, ANZ1220 is the callsign of the Air New
                Zealand flight 1220 from Queenstown to Auckland in New Zealand.
                It is possible for single airplane to make the same flight more
                than once in a 24hr period if it goes back and forth. This
                information will be used in later queries to partition an
                airplanes data into multiple flights.
            </para>
            <para>
                We can find the time at which the callsign of an airplane
                changes with the following steps.
            </para>
            <orderedlist numeration="arabic" spacing="compact">
                <listitem>
                    <para>
                        In Format as, we have
                        <quote>Table</quote>
                    </para>
                </listitem>
            </orderedlist>
            <programlisting language="sql">
SELECT
  min(et_ts) AS &quot;time&quot;, callsign
FROM flights
WHERE icao24 = 'c827a6'
GROUP BY callsign
            </programlisting>
            <orderedlist numeration="arabic">
                <listitem>
                    <para>
                        Change the visualization type to <quote>Table</quote>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The options (visualization settings - on the right side of
                        the screen) should be as follows:
                    </para>
                    <para>
                        <emphasis role="strong">Panel Options</emphasis>
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Title → Single AirFrame - Callsign vs Time
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </orderedlist>
            <para>
                In the visualization we can see that this airplane completed 3
                flights and started the 4th one towards the very end of the day.
                We also see there is some NULL data in the callsign column which
                is why the first timestamp doesn’t have a corresponding
                callsign.
            </para>
            <figure>
                <title>Single airframe callsign vs time</title>
                <mediaobject>
                    <imageobject>
                        <imagedata width='80%' fileref="images/SingleAirframeCallsignVsTime.png"/>
                    </imageobject>
                    <textobject>
                        <phrase>Single airframe callsign vs
                            time
                        </phrase>
                    </textobject>
                </mediaobject>
            </figure>
        </section>
    </section>
    </section>
    <section>
        <title>Part 3 - Working with Continuous Trajectories in MobilityDB</title>
        <para>
            For the following queries, we will make use of trajectories for
            aggregation and creating effective splits in our data based on
            parameters that change in time.
        </para>
        <section>
            <title>Creating MobilityDB Trajectories</title>
            <para>
                This step is completed once, only on the ingestion of data. It
                is shown below to provide an understanding of how to do it. With
                temporal datatypes and mobilityDB functionality, we can see the
                queries are very intuitive to create.
            </para>
            <para>
                We first create a geometry point. This treats each latitude and
                longitude as a point in space. 4326 is the SRID.
            </para>
            <programlisting language="sql">
ALTER TABLE flights
    ADD COLUMN geom geometry(Point, 4326);

UPDATE flights SET
  geom = ST_SetSRID( ST_MakePoint( lon, lat ), 4326);
</programlisting>
      <section>
        <title>AirFrame Trajectories</title>
        <para>
          Now we are ready to construct airframe or airplane
          trajectories out of their individual observations. Each
          <quote>icao24</quote> in our dataset represents a single
          airplane.
        </para>
        <para>
          We can create a composite index on icao24 (unique to each
          plane) and et_ts (timestamps of observations) to help improve
          the performance of trajectory generation.
        </para>
        <programlisting language="sql">
CREATE INDEX icao24_time_index
    ON flights (icao24, et_ts);
</programlisting>
        <para>
          We create trajectories for a single airframe because:
        </para>
        <itemizedlist spacing="compact">
          <listitem>
            <para>
              this query serves as a simple example of how to use
              mobilityDB to create trajectories
            </para>
          </listitem>
          <listitem>
            <para>
              these kind of trajectories can be very important for plane
              manufacturer, as they are interested in the airplane’s
              analysis.
            </para>
          </listitem>
          <listitem>
            <para>
              we are creating the building blocks for future queries.
              Each row would represent a single flight, where flight is
              identified by icao24 &amp; callsign.
            </para>
          </listitem>
        </itemizedlist>
        <programlisting language="sql">
CREATE TABLE airframe_traj(icao24, trip, velocity, heading, vertrate, callsign, squawk,
                           geoaltitude) AS
SELECT icao24,
       tgeompoint_seq(array_agg(tgeompoint_inst(geom, et_ts) ORDER BY et_ts)
                      FILTER (WHERE geom IS NOT NULL)),
       tfloat_seq(array_agg(tfloat_inst(velocity, et_ts) ORDER BY et_ts)
                  FILTER (WHERE velocity IS NOT NULL)),
       tfloat_seq(array_agg(tfloat_inst(heading, et_ts) ORDER BY et_ts)
                  FILTER (WHERE heading IS NOT NULL)),
       tfloat_seq(array_agg(tfloat_inst(vertrate, et_ts) ORDER BY et_ts)
                  FILTER (WHERE vertrate IS NOT NULL)),
       ttext_seq(array_agg(ttext_inst(callsign, et_ts) ORDER BY et_ts)
                 FILTER (WHERE callsign IS NOT NULL)),
       tint_seq(array_agg(tint_inst(squawk, et_ts) ORDER BY et_ts)
                FILTER (WHERE squawk IS NOT NULL)),
       tfloat_seq(array_agg(tfloat_inst(geoaltitude, et_ts) ORDER BY et_ts)
                  FILTER (WHERE geoaltitude IS NOT NULL))
FROM flights
GROUP BY icao24;
                </programlisting>
                <para>
                    Here we create a new table for all the trajectories. We select
                    all the attributes of interest that change over time. We
                    can follow the transformation from the inner call to the outer
                    call:
                </para>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para>
                            tgeompoint_inst: combines each geometry point(lat, long)
                            with the timestamp where that point existed
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            array_agg: aggregates all the instants together into a
                            single array for each item in the group by. In this case,
                            it will create an array for each icao24
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            tgeompoint_seq: constructs the array as a sequence which
                            can be manipulated with mobilityDB functionality. The same
                            approach is used for each trajectory, with the function
                            used changing depending on the datatype.
                        </para>
                    </listitem>
                </itemizedlist>
            </section>
        <section>
            <title>Flight Trajectories</title>
            <para>
                Right now we have, in a single row, an airframe’s (where an
                airframe is a single physical airplane) entire day’s trip
                information. We would like to segment that information per
                flight (an airframe flying under a specific callsign). This
                query segments the airframe trajectories (in temporal columns)
                based on the time period of the callsign. Below we explain the
                query and the reason behind segmenting the data this way.
            </para>
            <programlisting>
-- Each row from airframe will create a new row in flight_traj depending on when the
-- callsign changes, regardless of whether a plane repeats the same flight multiple
-- times in any period

-- Airplane123 (airframe_traj) |-------------------------|
-- Flightpath1 (flight_traj)   |-----|
-- Flightpath2 (flight_traj)         |--------|
-- Flightpath1 (flight_traj)                  |-------|
-- Flightpath3 (flight_traj)                          |--|
</programlisting>
      <programlisting language="sql">
CREATE TABLE flight_traj(icao24, callsign, flight_period, trip, velocity, heading,
                         vertrate, squawk, geoaltitude)
AS
    -- callsign sequence unpacked into rows to split all other temporal sequences.
WITH airframe_traj_with_unpacked_callsign AS
	(SELECT icao24, 
            trip, 
            velocity, 
            heading, 
            vertrate, 
            squawk, 
            geoaltitude, 
            startValue(unnest(segments(callsign))) AS start_value_callsign,
		    unnest(segments(callsign))::tstzspan AS callsign_segment_period
	FROM airframe_traj)
SELECT icao24 AS icao24, 
        start_value_callsign AS callsign, 
        callsign_segment_period AS flight_period, 
        atTime(trip, callsign_segment_period) AS trip, 
        atTime(velocity, callsign_segment_period) AS velocity, 
        atTime(heading, callsign_segment_period) AS heading, 
        atTime(vertrate, callsign_segment_period) AS vertrate, 
        atTime(squawk, callsign_segment_period) AS squawk, 
        atTime(geoaltitude, callsign_segment_period) AS geoaltitude
FROM airframe_traj_with_unpacked_callsign;
            </programlisting>
            <para>
                <emphasis role="strong">Note:</emphasis>
                We could have tried to
                create the above (table ”flight_traj”) per flight trajectories
                by simply including <quote>callsign</quote> in the GROUP BY
                statement in the query used to create the previous
                airframe_traj table
                (<literal>GROUP BY icao24, callsign;</literal>).
            </para>
            <para>
                The <emphasis role="strong">problem</emphasis> with this
                solution: This approach would put the trajectory data of 2
                distinct flights where that airplane and flight number are the
                same in a single row, which is not correct.
            </para>
            <para>
                MobilityDB functions helped us avoid the use of several
                hardcoded conditions that depend on user knowledge of the data.
                This approach is very generic and can be applied anytime we want
                to split a trajectory by the inflection points in time of some
                other trajectory.
            </para>
        </section>
        </section>
    <section>
        <title>Aggregating Flight Statistics</title>
        <para>
            We can now use our trajectories to pull flight specific statistics
            very easily.
        </para>
        <section>
            <title>Average Velocity of Each Flight</title>
            <orderedlist numeration="arabic">
                <listitem>
                    <para>
                        In Format as, we have
                        <quote>Table</quote>
                    </para>
                    <programlisting language="sql">
-- Average flight speeds during flight
SELECT callsign,twavg(velocity) AS average_velocity
FROM flight_traj
WHERE twavg(velocity)IS NOT NULL -- drop rows without velocity data
AND twavg(velocity) &lt; 1500 -- removes erroneous data
ORDER BY twavg(velocity) desc;
                    </programlisting>
                </listitem>
                <listitem>
                    <para>
                        Change the visualization type to <quote>Bar gauge</quote>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The options (visualization settings - on the right side of
                        the screen) should be as follows
                    </para>
                    <para>
                        <emphasis role="strong">Panel Options</emphasis>
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Title → Average Flight Speed
                                Show → All values 
                            </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        <emphasis role="strong">Bar gauge</emphasis>
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Orientation → Horizontal
                            </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        <emphasis role="strong">Standard Options</emphasis>
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Unit → meters/second (m/s)
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Min → 200
                            </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        The settings we adjust improve the visualization by cutting
                        the bar graph values of 0-200, improving the resolution at
                        higher ranges to see differences.
                    </para>
                    <figure>
                        <title>Average flight speed visualization</title>
                        <mediaobject>
                            <imageobject>
                                <imagedata width='50%' fileref="images/AverageFlightSpeedVisualization.png"/>
                            </imageobject>
                            <textobject>
                                <phrase>Average flight speed
                                    visualization
                                </phrase>
                            </textobject>
                        </mediaobject>
                    </figure>
                </listitem>
            </orderedlist>
        </section>
        <section>
            <title>Number of Private and Commercial Flights</title>
            <para>
                We can easily combine results from multiple queries in the same
                visualization in Grafana, simplifying the queries themselves.
                Here we apply some domain knowledge of sport pilot aircraft
                license limits for altitude and speed to provide an estimated
                count of each.
            </para>
            <orderedlist numeration="arabic">
                <listitem>
                    <para>
                        In Format as, we have
                        <quote>Table</quote>
                    </para>
                    <programlisting language="sql">
-- Flights completed by private pilots (estimate)
SELECT COUNT(callsign) AS private_flight
FROM flight_traj
WHERE (maxValue(velocity) IS NOT NULL -- remove flights without velocity
    AND maxValue(velocity) &lt;= 65) -- sport aircraft max is 140mph (65m/s)
AND (maxValue(geoaltitude) IS NOT NULL -- remove flights without altitude
    AND maxValue(geoaltitude) &lt;= 5500); --18,000ft (5,500m) max for private pilot

-- Count of commercial flights (estimate)
SELECT COUNT(callsign) AS commercial_flight
FROM flight_traj
WHERE (maxValue(velocity) IS NOT NULL
    AND maxValue(velocity) &gt; 65)
AND (maxValue(geoaltitude) IS NOT NULL
    AND maxValue(geoaltitude) &gt; 5500);
          </programlisting>
          <para>
            In Grafana, when we are in the query editor we can click on
            <quote>+ Query</quote> at the bottom to add multiple queries
            that provide different results.
          </para>
          <figure>
            <title>Multiple queries providing results for a single
            visualization</title>
            <mediaobject>
              <imageobject>
                <imagedata width='90%' fileref="images/MultipleQueriesSingleVisualization.png" />
              </imageobject>
              <textobject><phrase>Multiple queries providing results for
              a single visualization</phrase></textobject>
            </mediaobject>
          </figure>
        </listitem>
        <listitem>
          <para>
            Change the visualization type to <quote>Stat</quote>.
          </para>
          <para>
            To label the data for each result separately, choose
            <quote>Overrides</quote> at the top of the options panel on
            the right. Here you can override global panel settings for
            specific attributes as shown below.
          </para>
          <figure>
            <title>Override options for panel with multiple
            queries</title>
            <mediaobject>
              <imageobject>
                <imagedata width='50%' fileref="images/OverrideOptionsMultipleQueries.png" />
              </imageobject>
              <textobject><phrase>Override options for panel with
              multiple queries</phrase></textobject>
            </mediaobject>
          </figure>
        </listitem>
      </orderedlist>
      <para>
        The final statistics visualization will look like this:
      </para>
      <figure>
        <title>Statistic visualization of number of flights by license
        type</title>
        <mediaobject>
          <imageobject>
            <imagedata width='30%' fileref="images/StatisticVisualizationByFlightType.png" />
          </imageobject>
          <textobject><phrase>Statistic visualization of number of
          flights by license type</phrase></textobject>
        </mediaobject>
      </figure>
    </section>
    </section>
        <section><title>Flights Taking-off in Some Interval of Time (User-Defined)</title>
            <para>
                <emphasis role="strong">Note:</emphasis>
                This query makes used
                of a sample set of data that has 200 flights to return results.
                <quote>flight_traj_sample</quote>
                is just a sampled version of
                <quote>flight_traj</quote>. As of the writing of this workshop,
                Grafana does not support display of vectors, and so individual
                latitude and longitude points are used as a proxy.
            </para>
            <para>
            In order to make the query use Grafana global time range panel replace 
            the hard-coded timestamps with the  ‘[${__from:date}, ${__to:date} )’.
            </para>

            <programlisting language="sql">
WITH
-- The flight_traj_time_slice CTE is clipping all the temporal columns
-- to the user specified time-range.
flight_traj_time_slice (icao24, callsign, time_slice_trip, time_slice_geoaltitude,
time_slice_vertrate) AS
	(SELECT icao24, callsign,
		atTime(trip, tstzspan '[2020-06-01 02:35:00, 2020-06-01 02:55:00)'), -- I changed the dates to fit my data, you should do the same!!
		atTime(geoaltitude, tstzspan '[2020-06-01 02:35:00, 2020-06-01 02:55:00)'),
		atTime(vertrate, tstzspan '[2020-06-01 02:35:00, 2020-06-01 02:55:00)')
	FROM flight_traj_sample TABLESAMPLE SYSTEM (20)),
-- There are 3 things happening in the flight_traj_time_slice_ascent CTE:
-- 1. atRange: Clips the temporal data to create ranges where the vertrate
-- was between '[1, 20]'. This vertrate means an aircraft was ascending.
-- 2. sequenceN: Selects the first sequence from the generated sequences.
-- This first sequence is takeoff and eliminates mid-flight ascents.
-- 3. atPeriod: Returns the period of the first sequence.
flight_traj_time_slice_ascent(icao24, callsign, ascending_trip, ascending_geoaltitude,
ascending_vertrate) AS
	(SELECT icao24, callsign,
		atTime(time_slice_trip, sequenceN(atValues(time_slice_vertrate, floatspan '[1,200]'), 1)::tstzspan),
		atTime(time_slice_geoaltitude,
			sequenceN(atValues(time_slice_vertrate, floatspan '[1,20]'),1)::tstzspan),
		atTime(time_slice_vertrate,
			sequenceN(atValues(time_slice_vertrate, floatspan '[1,20]'),1)::tstzspan)
	FROM flight_traj_time_slice),
-- The final_output CTE uses unnest to unpack the temporal data into rows for
-- visualization in Grafana. Each row will contain a latitude, longitude and the altitude
-- and vertrate at those locations.
final_output AS
	(SELECT icao24, callsign,
		getValue(unnest(instants(ascending_geoaltitude))) AS geoaltitude,
		getValue(unnest(instants(ascending_vertrate))) AS vertrate,
		ST_X(getValue(unnest(instants(ascending_trip)))) AS lon,
		ST_Y(getValue(unnest(instants(ascending_trip)))) AS lat
	FROM flight_traj_time_slice_ascent)
SELECT *
FROM final_output
WHERE vertrate IS NOT NULL
AND geoaltitude IS NOT NULL;
            </programlisting>
            <para>
                Tips for <emphasis role="strong">QGIS</emphasis> visualization:
                QGIS uses geometry points for visualization, so for that in the
                third CTE you can use trajectory function on ascending_trip and
                unnest the result.
            </para>
            <para>
                We will modify make the follow adjustments for the
                visualization.
            </para>
            <orderedlist numeration="arabic">
                <listitem>
                    <para>
                        Change the visualization type to <quote>Geomap</quote>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The options (visualization settings - on the right side of
                        the screen) should be as follows:
                    </para>
                    <para>
                        <emphasis role="strong">Panel Options</emphasis>
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Title → Flight Ascent in Time Window
                            </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        <emphasis role="strong">Data Layer:</emphasis>
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Layer type: Markers
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Location: Coords
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Latitude field: lat
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Longitude field: lon
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Styles
                            </para>
                            <itemizedlist spacing="compact">
                                <listitem>
                                    <para>
                                        Size: geoaltitude
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        Min: 1
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        Max: 5
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        Color: vertrate
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        Fill opacity: 0.5
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </itemizedlist>
                    <para>
                        <emphasis role="strong">Standard Options:</emphasis>
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Unit: meters/second (m/s)
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Color scheme: Green-Yellow-Red (by value)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
            <para>
                We will also add a manual override (top right of panel options, beside "All") to limit the minimum value of vertrate. This will make all values
                below the minimum the same color, making larger values more obvious. This can be used to quickly
                pinpoint locations where a large rate of ascent existed.
            </para>
                    <para>
                        <emphasis role="strong">Overrides</emphasis>
                    </para>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>
                                Add field override > Fields with name > vertrate
                            </para>
                        </listitem>
                        <itemizedlist spacing="compact">
                            <listitem>
                                <para>
                                    Min: 5
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    Max: 20
                                </para>
                            </listitem>
                        </itemizedlist>
                    </itemizedlist>
                </listitem>

                </orderedlist>
            <para>
                Here is a zoomed in version of how each individual flight ascent will look, as well as a view of
                multiple flights at the same time. The marker size is increasing with altitude, and the color is showing
                more aggressive vertical ascent rates. We can see towards the end of the visualized ascent period, there
                is a short increased vertical ascent rate.
            </para>
            <figure>
                <title>Zoomed in view of flight ascent</title>
                <mediaobject>
                    <imageobject>
                        <imagedata width='60%' fileref="images/ZoomedInViewOfFlightAscent.png"/>
                    </imageobject>
                    <textobject>
                        <phrase>Zoomed in view of flight
                            ascent
                        </phrase>
                    </textobject>
                </mediaobject>
            </figure>
            <para>
                The final visualization will look like the below.
            </para>
            <figure>
                <title>Final visualization with multiple flight ascents</title>
                <mediaobject>
                    <imageobject>
                        <imagedata width='70%' fileref="images/FinalVisualizationWithMultipleFlightAscents.png"/>
                    </imageobject>
                    <textobject>
                        <phrase>Final visualization with multiple flight
                            ascents
                        </phrase>
                    </textobject>
                </mediaobject>
            </figure>
        </section>
    </section>
        <section><title>Complete Flight Data Business Intelligence Dashboard</title>
            <para>
                The dashboard, with all the visualizations at the same time, will look like the screenshot below. Here
                we can continue to extend the dashboards functionality by adding more dynamic variables to have the individual flight
                data on the left generated with a user query or selection based on the overview take-off
                information on the right. This is what really empowers decision makers and subject-matter experts (SMEs) to
                quickly move through data and hone-in on important aspects that may have otherwise been over-looked.
            </para>
            <figure>
                <title>Flight data business intelligence dashboard</title>
                <mediaobject>
                    <imageobject>
                        <imagedata width='95%' fileref="images/FlightDashboard_final_visualization.png"/>
                    </imageobject>
                    <textobject>
                        <phrase>Flight data business intelligence dashboard
                        </phrase>
                    </textobject>
                </mediaobject>
            </figure>
        </section>
</chapter>
